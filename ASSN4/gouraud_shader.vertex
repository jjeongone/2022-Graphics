#version 330 core

layout (location = 0) in vec3 vPosition;
layout (location = 1) in vec3 vNormal;
layout (location = 2) in vec2 vTexCoord;

out vec4 vertexColor;
out vec2 texCoord;

uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;
uniform vec4 LightPosition;
uniform float Shininess;

uniform vec4 PointAmbientProduct, PointDiffuseProduct, PointSpecularProduct;
uniform vec4 PointLightPosition;
uniform float PointShininess;

uniform mat4 Model;
uniform mat4 Camera; 
uniform mat4 Projection;
uniform vec4 Color;

vec4 calculate_gouraud_light (mat4 Camera, vec3 N, vec3 pos, vec4 LightPosition, vec4 AmbientProduct, vec4 DiffuseProduct, vec4 SpecularProduct, float Shininess);


void main()
{
	mat4 ModelView = Camera * Model;
	vec3 pos = (ModelView * vec4(vPosition, 1.0)).xyz;
	vec3 N = normalize(ModelView * vec4(vNormal, 0.0)).xyz;

    gl_Position = Projection * ModelView * vec4(vPosition, 1.0);
	vec4 DirectionalLight = calculate_gouraud_light(Camera, N, pos, LightPosition, AmbientProduct, DiffuseProduct, SpecularProduct, Shininess);
	vec4 PointLight = calculate_gouraud_light(Camera, N, pos, PointLightPosition, PointAmbientProduct, PointDiffuseProduct, PointSpecularProduct, PointShininess);
	vertexColor = (DirectionalLight + PointLight) * Color;
	vertexColor.a = 1.0;
	texCoord = vTexCoord;
}

vec4 calculate_gouraud_light (mat4 Camera, vec3 N, vec3 pos, vec4 LightPosition, vec4 AmbientProduct, vec4 DiffuseProduct, vec4 SpecularProduct, float Shininess) 
{
	vec3 L = normalize((Camera * vec4(LightPosition.xyz, 1.0)).xyz - pos);
	vec3 E = normalize(-pos);
	vec3 H = normalize(L+E);
	
	vec4 ambient = AmbientProduct;
	float Kd = max(dot(L,N), 0.0);
	vec4 diffuse = Kd * DiffuseProduct;
	float Ks = pow(max(dot(N,H), 0.0), Shininess);
	vec4 specular = Ks * SpecularProduct;
	if(dot(L,N) < 0.0) specular = vec4(0.0, 0.0, 0.0, 1.0);

	return (ambient + diffuse + specular);
}
#version 330 core

layout (location = 0) in vec3 vPosition;
layout (location = 1) in vec3 vNormal;

out vec4 color;

uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;
uniform mat4 Model;
uniform mat4 Camera; 
uniform mat4 Projection;
uniform vec4 LightPosition;
uniform float Shininess;

void main()
{
	mat4 ModelView = Model;
	// Transform vertex position into eye coordinate
	vec3 pos = (ModelView * vec4(vPosition, 1.0)).xyz;

	vec3 L = normalize(LightPosition.xyz - pos);
	vec3 E = normalize(-pos);
	vec3 H = normalize(L+E);

	// Transform vertex normal into eye coordiantes
	vec3 N = normalize(ModelView * vec4(vNormal, 0.0)).xyz;

	// Compute the terms in the illumination equation
	vec4 ambient = AmbientProduct;

	float Kd = max(dot(L,N), 0.0);
	vec4 diffuse = Kd * DiffuseProduct;
	float Ks = pow(max(dot(N,H), 0.0), Shininess);
	vec4 specular = Ks * SpecularProduct;
	if(dot(L,N) < 0.0) specular = vec4(0.0, 0.0, 0.0, 1.0);

    gl_Position =  Projection * ModelView * vec4(vPosition, 1.0);
	color = ambient + diffuse + specular;
	color.a = 1.0;
}